<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tutorial on Damian Galarza | Technical Partner for Startups &amp; Fractional CTO</title><link>https://damiangalarza.com/tags/tutorial/</link><description>Recent content in Tutorial on Damian Galarza | Technical Partner for Startups &amp; Fractional CTO</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sat, 21 Jun 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://damiangalarza.com/tags/tutorial/atom.xml" rel="self" type="application/rss+xml"/><item><title>The AI Prompt I Wish I Had While Documenting SaMD Systems in Rails</title><link>https://damiangalarza.com/posts/2025-06-22-generate-sds-docs-samd-ai/</link><pubDate>Sat, 21 Jun 2025 00:00:00 +0000</pubDate><guid>https://damiangalarza.com/posts/2025-06-22-generate-sds-docs-samd-ai/</guid><description>&lt;p&gt;At Buoy Software, I led the design and development of our first &lt;strong&gt;Software as a Medical Device (SaMD)&lt;/strong&gt;, which was my first experience operating within an FDA-regulated environment. It was a great learning experience, but it came with a lot of heavy documentation. One of the most time-consuming parts was compiling the Design History File (DHF) â€” the set of artifacts that describe how the system was built and tested. A central piece of that file is the Software Design Specification (SDS), which describes the behavior, design, and rationale for each component in the system.&lt;/p&gt;</description></item><item><title>Acceptance Tests with Subdomains</title><link>https://damiangalarza.com/posts/2016-10-10-acceptance-tests-with-subdomains/</link><pubDate>Mon, 10 Oct 2016 00:00:00 +0000</pubDate><guid>https://damiangalarza.com/posts/2016-10-10-acceptance-tests-with-subdomains/</guid><description>&lt;p&gt;This post was originally published on the &lt;a href="https://thoughtbot.com/blog/acceptance-tests-with-subdomains"&gt;thoughtbot blog&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You&amp;rsquo;re excited about building a new application which allows users to sign up and host their own blog. You decide that each blog will have their own space by providing a subdomain.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s start off with a feature spec.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-ruby" data-lang="ruby"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#89dceb"&gt;require&lt;/span&gt; &lt;span style="color:#a6e3a1"&gt;&amp;#34;rails_helper&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;feature &lt;span style="color:#a6e3a1"&gt;&amp;#34;user views a blog&amp;#34;&lt;/span&gt; &lt;span style="color:#cba6f7"&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; scenario &lt;span style="color:#a6e3a1"&gt;&amp;#34;homepage&amp;#34;&lt;/span&gt; &lt;span style="color:#cba6f7"&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; blog &lt;span style="color:#89dceb;font-weight:bold"&gt;=&lt;/span&gt; create(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e3a1"&gt;:blog&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e3a1"&gt;subdomain&lt;/span&gt;: &lt;span style="color:#a6e3a1"&gt;&amp;#34;bobloblaw&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e3a1"&gt;title&lt;/span&gt;: &lt;span style="color:#a6e3a1"&gt;&amp;#34;Bob Loblaw&amp;#39;s Law Blog&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e3a1"&gt;description&lt;/span&gt;: &lt;span style="color:#a6e3a1"&gt;&amp;#34;Welcome to my new blog.&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; )
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; visit root_path
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; expect(page)&lt;span style="color:#89dceb;font-weight:bold"&gt;.&lt;/span&gt;to have_content blog&lt;span style="color:#89dceb;font-weight:bold"&gt;.&lt;/span&gt;title
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; expect(page)&lt;span style="color:#89dceb;font-weight:bold"&gt;.&lt;/span&gt;to have_content blog&lt;span style="color:#89dceb;font-weight:bold"&gt;.&lt;/span&gt;description
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#cba6f7"&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#cba6f7"&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In our app we render the blog homepage using the following:&lt;/p&gt;</description></item><item><title>Getting Started with iOS Development</title><link>https://damiangalarza.com/posts/2015-06-12-getting-started-with-ios-development/</link><pubDate>Fri, 12 Jun 2015 00:00:00 +0000</pubDate><guid>https://damiangalarza.com/posts/2015-06-12-getting-started-with-ios-development/</guid><description>I&amp;rsquo;ve recently started learning iOS and Swift and I wanted to share my experiences so far.</description></item><item><title>Take Control of Your HTTP Caching in Rails</title><link>https://damiangalarza.com/posts/2015-01-26-take-control-of-your-http-caching-in-rails/</link><pubDate>Mon, 26 Jan 2015 00:00:00 +0000</pubDate><guid>https://damiangalarza.com/posts/2015-01-26-take-control-of-your-http-caching-in-rails/</guid><description>&lt;p&gt;This post was originally published on the &lt;a href="https://thoughtbot.com/blog/take-control-of-your-http-caching-in-rails"&gt;thoughtbot blog&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The Rails &lt;code&gt;fresh_when&lt;/code&gt; method is a powerful tool for conditionally caching resources via HTTP. However there are some pitfalls. For one, &lt;code&gt;fresh_when&lt;/code&gt; only supports the default render flow in a controller; if a client&amp;rsquo;s cache is not fresh, it will just render the related view. We cannot utilize things like &lt;code&gt;render json:&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Fortunately, Rails provides us with more tools to work with HTTP conditional caching. Some of the basics behind HTTP conditional caching are assumed in this post. If you haven&amp;rsquo;t already, or you just need a refresher take a look at &lt;a href="https://damiangalarza.com/posts/2014-11-25-introduction-to-conditional-http-caching-with-rails/"&gt;Introduction to Conditional HTTP Caching with Rails&lt;/a&gt;.&lt;/p&gt;</description></item><item><title>Introduction to Conditional HTTP Caching with Rails</title><link>https://damiangalarza.com/posts/2014-11-25-introduction-to-conditional-http-caching-with-rails/</link><pubDate>Tue, 25 Nov 2014 00:00:00 +0000</pubDate><guid>https://damiangalarza.com/posts/2014-11-25-introduction-to-conditional-http-caching-with-rails/</guid><description>&lt;p&gt;This post was originally published on the &lt;a href="https://thoughtbot.com/blog/introduction-to-conditional-http-caching-with-rails"&gt;thoughtbot blog&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;HTTP provides developers with a powerful set of tools to cache responses. Often times we don&amp;rsquo;t want a client to blindly cache content that it has been given. We may not be able to rely on setting specific expiration headers either. Instead we need a way for the client to ask the server whether or not a resource has been updated.&lt;/p&gt;
&lt;p&gt;HTTP provides us with the ability to do this with conditional caching. A client can make a request to the server and find out of the server has a new version of the resource available.&lt;/p&gt;</description></item><item><title>Scaling JSON APIs in Rails using ActiveModel::Serializers, Key-Based Caching, and Rack::Cache</title><link>https://damiangalarza.com/posts/scaling-json-apis-in-rails/</link><pubDate>Sun, 03 Nov 2013 00:00:00 +0000</pubDate><guid>https://damiangalarza.com/posts/scaling-json-apis-in-rails/</guid><description>A guide on building high-scale JSON APIs in Rails using ActiveModel::Serializers, Key-Based Caching, and Rack::Cache. This post covers organizing APIs, leveraging HTTP caching, and ensuring high scalability.</description></item><item><title>CSS3 Transition Idiom</title><link>https://damiangalarza.com/posts/2012-04-02-css3-transition-idiom/</link><pubDate>Mon, 02 Apr 2012 02:58:25 +0000</pubDate><guid>https://damiangalarza.com/posts/2012-04-02-css3-transition-idiom/</guid><description>Exploring the use of CSS3 transitions, including browser feature detection, graceful degradation, and a simple idiom for applying transitions with fallbacks to JavaScript animations. Discusses the benefits of CSS transitions and methods for detecting browser support.</description></item><item><title>Bringing back the image map</title><link>https://damiangalarza.com/posts/2010-12-27-bringing-back-the-image-map/</link><pubDate>Mon, 27 Dec 2010 18:34:59 +0000</pubDate><guid>https://damiangalarza.com/posts/2010-12-27-bringing-back-the-image-map/</guid><description>A look at using image maps in modern web development, including a case study on creating clickable triangular areas, handling multiple instances of the same image map, and using JavaScript to determine which image was clicked.</description></item><item><title>CSS Gradient Definitions</title><link>https://damiangalarza.com/posts/2010-12-23-css-gradient-definitions/</link><pubDate>Thu, 23 Dec 2010 03:26:19 +0000</pubDate><guid>https://damiangalarza.com/posts/2010-12-23-css-gradient-definitions/</guid><description>An update to the CSS3 Gradient Generator that changes how the code sample is generated, moving from the &amp;lsquo;background&amp;rsquo; property to &amp;lsquo;background-image&amp;rsquo; to resolve issues with default values for other background properties.</description></item><item><title>Using Uploadify with Rails 3 - Part 2 - Controller Example</title><link>https://damiangalarza.com/posts/2010-10-27-using-uploadify-with-rails-3-part-2-controller-example/</link><pubDate>Wed, 27 Oct 2010 02:08:08 +0000</pubDate><guid>https://damiangalarza.com/posts/2010-10-27-using-uploadify-with-rails-3-part-2-controller-example/</guid><description>A follow-up post on using Uploadify with Rails 3, focusing on setting up the controller to work with file uploads. This part covers handling content types and provides a full code sample for a Paperclip-based model and controller method.</description></item><item><title>Using Uploadify with Rails 3</title><link>https://damiangalarza.com/posts/2010-08-25-using-uploadify-with-rails-3/</link><pubDate>Wed, 25 Aug 2010 02:29:53 +0000</pubDate><guid>https://damiangalarza.com/posts/2010-08-25-using-uploadify-with-rails-3/</guid><description>&lt;p&gt;I recently worked on a couple of Rails projects which both implemented the ability to upload photos to the server. One of these projects required the ability to upload multiple files at once and since HTML5 multi-file uploads aren&amp;rsquo;t ready yet I needed another solution. So I decided to move forward using a Flash based uploader, specifically &lt;a href="http://www.uploadify.com/"&gt;Uploadify&lt;/a&gt;. Uploadify is a jQuery plugin which allows you to upload multiple files through a Flash based interface which provides helpful functionality like progress bars and multi-upload queuing, along with this, it&amp;rsquo;s super easy to use.&lt;/p&gt;</description></item><item><title>About iPhone Web Applications</title><link>https://damiangalarza.com/posts/2009-07-27-about-iphone-web-applications/</link><pubDate>Mon, 27 Jul 2009 13:53:37 +0000</pubDate><guid>https://damiangalarza.com/posts/2009-07-27-about-iphone-web-applications/</guid><description>&lt;p&gt;Let me start by this post by specifying that it actually originated from another post that Iâ€™m working on right now, but while writing it I went off on quite a tangent that I decided it was time to make it into a completely separate post, and start off with it. So this is part one of an iPhone web application piece that I am working on. While I am it, let me point out what the scope of this article is. This article is not about how to write an iPhone web application. It does not go into details on the syntax or use of technologies for the iPhone. It does explain some of the misconceptions between iPhone applications, iPhone targeted websites, and finally, iPhone Web Applications. I do plan to write more about the iPhone web application technologies and provide some examples and working code, but that is all currently beyond the scope of this article.&lt;/p&gt;
&lt;p&gt;While researching on the topic over the last few weeks, I discovered what I believe is a misconception of an iPhone web application, and my goal is to hopefully, clear things up.&lt;/p&gt;
&lt;p&gt;Letâ€™s start by defining some of the possible ways of targeting an iPhone user, which actually diverges into two separate categories of its own. The first and probably the most popular way of targeting an iPhone user is through an iPhone app, sold through the iTunes App store. Coding and compiling Objective C/Cocoa based native iPhone applications.&lt;/p&gt;
&lt;p&gt;Yet there are still other ways of creating a custom user experience for a user on the iPhone.&lt;/p&gt;</description></item></channel></rss>