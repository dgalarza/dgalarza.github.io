<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Caching on Damian Galarza | Technical Partner for Startups &amp; Fractional CTO</title><link>https://damiangalarza.com/tags/caching/</link><description>Recent content in Caching on Damian Galarza | Technical Partner for Startups &amp; Fractional CTO</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Mon, 26 Jan 2015 00:00:00 +0000</lastBuildDate><atom:link href="https://damiangalarza.com/tags/caching/atom.xml" rel="self" type="application/rss+xml"/><item><title>Take Control of Your HTTP Caching in Rails</title><link>https://damiangalarza.com/posts/2015-01-26-take-control-of-your-http-caching-in-rails/</link><pubDate>Mon, 26 Jan 2015 00:00:00 +0000</pubDate><guid>https://damiangalarza.com/posts/2015-01-26-take-control-of-your-http-caching-in-rails/</guid><description>&lt;p&gt;This post was originally published on the &lt;a href="https://thoughtbot.com/blog/take-control-of-your-http-caching-in-rails"&gt;thoughtbot blog&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The Rails &lt;code&gt;fresh_when&lt;/code&gt; method is a powerful tool for conditionally caching resources via HTTP. However there are some pitfalls. For one, &lt;code&gt;fresh_when&lt;/code&gt; only supports the default render flow in a controller; if a client&amp;rsquo;s cache is not fresh, it will just render the related view. We cannot utilize things like &lt;code&gt;render json:&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Fortunately, Rails provides us with more tools to work with HTTP conditional caching. Some of the basics behind HTTP conditional caching are assumed in this post. If you haven&amp;rsquo;t already, or you just need a refresher take a look at &lt;a href="https://damiangalarza.com/posts/2014-11-25-introduction-to-conditional-http-caching-with-rails/"&gt;Introduction to Conditional HTTP Caching with Rails&lt;/a&gt;.&lt;/p&gt;</description></item><item><title>Introduction to Conditional HTTP Caching with Rails</title><link>https://damiangalarza.com/posts/2014-11-25-introduction-to-conditional-http-caching-with-rails/</link><pubDate>Tue, 25 Nov 2014 00:00:00 +0000</pubDate><guid>https://damiangalarza.com/posts/2014-11-25-introduction-to-conditional-http-caching-with-rails/</guid><description>&lt;p&gt;This post was originally published on the &lt;a href="https://thoughtbot.com/blog/introduction-to-conditional-http-caching-with-rails"&gt;thoughtbot blog&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;HTTP provides developers with a powerful set of tools to cache responses. Often times we don&amp;rsquo;t want a client to blindly cache content that it has been given. We may not be able to rely on setting specific expiration headers either. Instead we need a way for the client to ask the server whether or not a resource has been updated.&lt;/p&gt;
&lt;p&gt;HTTP provides us with the ability to do this with conditional caching. A client can make a request to the server and find out of the server has a new version of the resource available.&lt;/p&gt;</description></item><item><title>Scaling JSON APIs in Rails using ActiveModel::Serializers, Key-Based Caching, and Rack::Cache</title><link>https://damiangalarza.com/posts/scaling-json-apis-in-rails/</link><pubDate>Sun, 03 Nov 2013 00:00:00 +0000</pubDate><guid>https://damiangalarza.com/posts/scaling-json-apis-in-rails/</guid><description>A guide on building high-scale JSON APIs in Rails using ActiveModel::Serializers, Key-Based Caching, and Rack::Cache. This post covers organizing APIs, leveraging HTTP caching, and ensuring high scalability.</description></item></channel></rss>