<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Rails on Damian Galarza | Technical Partner for Startups &amp; Fractional CTO</title><link>https://damiangalarza.com/tags/rails/</link><description>Recent content in Rails on Damian Galarza | Technical Partner for Startups &amp; Fractional CTO</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Thu, 10 Jul 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://damiangalarza.com/tags/rails/atom.xml" rel="self" type="application/rss+xml"/><item><title>Startup Software in a Regulated World — Without Slowing Down</title><link>https://damiangalarza.com/posts/2025-07-10-building-compliant-startup-software/</link><pubDate>Thu, 10 Jul 2025 00:00:00 +0000</pubDate><guid>https://damiangalarza.com/posts/2025-07-10-building-compliant-startup-software/</guid><description>We built the internal platform that powered Join Parachute’s first plasma collection center and scaled it to 26+ FDA-licensed sites. This post shares how we delivered under tight timelines, aligned with regulatory requirements, and laid the groundwork for our first FDA-cleared SaMD — all while maintaining startup speed.</description></item><item><title>How Buoy Software is Redefining Rails Development with ViewComponents</title><link>https://damiangalarza.com/posts/2024-09-05-react-to-view-components/</link><pubDate>Thu, 05 Sep 2024 00:00:00 +0000</pubDate><guid>https://damiangalarza.com/posts/2024-09-05-react-to-view-components/</guid><description>&lt;p>This post was originally posted on the &lt;a href="https://buoy.blog/2024/09/05/react-to-view-components.html">Buoy Software blog&lt;/a>.&lt;/p>
&lt;p>In the ever-evolving world of web development, choosing the right technology
stack is crucial for building efficient and maintainable applications. We moved away
from React and GraphQL, opting instead for traditional REST APIs and Rails-based
views, leveraging the power of the &lt;a href="https://viewcomponent.org/">ViewComponents gem&lt;/a>.&lt;/p>
&lt;h2 id="the-initial-tech-stack-react-and-graphql">The initial tech stack: React and GraphQL&lt;/h2>
&lt;p>Buoy Software&amp;rsquo;s journey began with a mobile application built using React Native
and powered by a GraphQL API in a Ruby on Rails application. The success of this
project led us to adopt similar technologies for our web application, resulting
in a React based front-end using webpacker. This approach allowed for code reuse
and consistency across platforms, which seemed like an ideal solution at the time.
For our small team, it was easier to maintain a shared pattern when moving
between the React Native application and our web application.&lt;/p></description></item><item><title>Acceptance Tests with Subdomains</title><link>https://damiangalarza.com/posts/2016-10-10-acceptance-tests-with-subdomains/</link><pubDate>Mon, 10 Oct 2016 00:00:00 +0000</pubDate><guid>https://damiangalarza.com/posts/2016-10-10-acceptance-tests-with-subdomains/</guid><description>&lt;p>This post was originally published on the &lt;a href="https://thoughtbot.com/blog/acceptance-tests-with-subdomains">thoughtbot blog&lt;/a>.&lt;/p>
&lt;p>You&amp;rsquo;re excited about building a new application which allows users to sign up and host their own blog. You decide that each blog will have their own space by providing a subdomain.&lt;/p>
&lt;p>Let&amp;rsquo;s start off with a feature spec.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#89dceb">require&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;rails_helper&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>feature &lt;span style="color:#a6e3a1">&amp;#34;user views a blog&amp;#34;&lt;/span> &lt;span style="color:#cba6f7">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> scenario &lt;span style="color:#a6e3a1">&amp;#34;homepage&amp;#34;&lt;/span> &lt;span style="color:#cba6f7">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> blog &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> create(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e3a1">:blog&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e3a1">subdomain&lt;/span>: &lt;span style="color:#a6e3a1">&amp;#34;bobloblaw&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e3a1">title&lt;/span>: &lt;span style="color:#a6e3a1">&amp;#34;Bob Loblaw&amp;#39;s Law Blog&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e3a1">description&lt;/span>: &lt;span style="color:#a6e3a1">&amp;#34;Welcome to my new blog.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> visit root_path
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> expect(page)&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>to have_content blog&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>title
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> expect(page)&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>to have_content blog&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>description
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In our app we render the blog homepage using the following:&lt;/p></description></item><item><title>Take Control of Your HTTP Caching in Rails</title><link>https://damiangalarza.com/posts/2015-01-26-take-control-of-your-http-caching-in-rails/</link><pubDate>Mon, 26 Jan 2015 00:00:00 +0000</pubDate><guid>https://damiangalarza.com/posts/2015-01-26-take-control-of-your-http-caching-in-rails/</guid><description>&lt;p>This post was originally published on the &lt;a href="https://thoughtbot.com/blog/take-control-of-your-http-caching-in-rails">thoughtbot blog&lt;/a>.&lt;/p>
&lt;p>The Rails &lt;code>fresh_when&lt;/code> method is a powerful tool for conditionally caching resources via HTTP. However there are some pitfalls. For one, &lt;code>fresh_when&lt;/code> only supports the default render flow in a controller; if a client&amp;rsquo;s cache is not fresh, it will just render the related view. We cannot utilize things like &lt;code>render json:&lt;/code>.&lt;/p>
&lt;p>Fortunately, Rails provides us with more tools to work with HTTP conditional caching. Some of the basics behind HTTP conditional caching are assumed in this post. If you haven&amp;rsquo;t already, or you just need a refresher take a look at &lt;a href="https://damiangalarza.com/posts/2014-11-25-introduction-to-conditional-http-caching-with-rails/">Introduction to Conditional HTTP Caching with Rails&lt;/a>.&lt;/p></description></item><item><title>Introduction to Conditional HTTP Caching with Rails</title><link>https://damiangalarza.com/posts/2014-11-25-introduction-to-conditional-http-caching-with-rails/</link><pubDate>Tue, 25 Nov 2014 00:00:00 +0000</pubDate><guid>https://damiangalarza.com/posts/2014-11-25-introduction-to-conditional-http-caching-with-rails/</guid><description>&lt;p>This post was originally published on the &lt;a href="https://thoughtbot.com/blog/introduction-to-conditional-http-caching-with-rails">thoughtbot blog&lt;/a>.&lt;/p>
&lt;p>HTTP provides developers with a powerful set of tools to cache responses. Often times we don&amp;rsquo;t want a client to blindly cache content that it has been given. We may not be able to rely on setting specific expiration headers either. Instead we need a way for the client to ask the server whether or not a resource has been updated.&lt;/p>
&lt;p>HTTP provides us with the ability to do this with conditional caching. A client can make a request to the server and find out of the server has a new version of the resource available.&lt;/p></description></item><item><title>Scaling JSON APIs in Rails using ActiveModel::Serializers, Key-Based Caching, and Rack::Cache</title><link>https://damiangalarza.com/posts/scaling-json-apis-in-rails/</link><pubDate>Sun, 03 Nov 2013 00:00:00 +0000</pubDate><guid>https://damiangalarza.com/posts/scaling-json-apis-in-rails/</guid><description>A guide on building high-scale JSON APIs in Rails using ActiveModel::Serializers, Key-Based Caching, and Rack::Cache. This post covers organizing APIs, leveraging HTTP caching, and ensuring high scalability.</description></item><item><title>Using Uploadify with Rails 3 - Part 2 - Controller Example</title><link>https://damiangalarza.com/posts/2010-10-27-using-uploadify-with-rails-3-part-2-controller-example/</link><pubDate>Wed, 27 Oct 2010 02:08:08 +0000</pubDate><guid>https://damiangalarza.com/posts/2010-10-27-using-uploadify-with-rails-3-part-2-controller-example/</guid><description>A follow-up post on using Uploadify with Rails 3, focusing on setting up the controller to work with file uploads. This part covers handling content types and provides a full code sample for a Paperclip-based model and controller method.</description></item><item><title>Using Uploadify with Rails 3</title><link>https://damiangalarza.com/posts/2010-08-25-using-uploadify-with-rails-3/</link><pubDate>Wed, 25 Aug 2010 02:29:53 +0000</pubDate><guid>https://damiangalarza.com/posts/2010-08-25-using-uploadify-with-rails-3/</guid><description>&lt;p>I recently worked on a couple of Rails projects which both implemented the ability to upload photos to the server. One of these projects required the ability to upload multiple files at once and since HTML5 multi-file uploads aren&amp;rsquo;t ready yet I needed another solution. So I decided to move forward using a Flash based uploader, specifically &lt;a href="http://www.uploadify.com/">Uploadify&lt;/a>. Uploadify is a jQuery plugin which allows you to upload multiple files through a Flash based interface which provides helpful functionality like progress bars and multi-upload queuing, along with this, it&amp;rsquo;s super easy to use.&lt;/p></description></item></channel></rss>